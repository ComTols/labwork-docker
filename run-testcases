#!/usr/bin/python3
#	labwork-docker - Docker-based system for evaluation labwork
#	Copyright (C) 2021-2021 Johannes Bauer
#
#	This file is part of labwork-docker.
#
#	labwork-docker is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	labwork-docker is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with labwork-docker; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import subprocess
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Executor of labwork submission file.")
parser.add_argument("-u", "--server-uri", metavar = "uri", default = "http://172.18.0.1:5000/", help = "URI of the test server endpoint. Defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("-a", "--assignment", metavar = "assignment_name", action = "append", default = [ ], required = True, help = "Assignment name to execute. Can be specified multiple times.")
parser.add_argument("submission_file", metavar = "filename", nargs = "+", help = "Submission .tar.gz archive(s)")
args = parser.parse_args(sys.argv[1:])

class TestcaseRunner():
	def __init__(self, args):
		self._args = args
		self._container_ids = [ ]

	def run(self, submission_file):
		if not os.path.isfile(submission_file):
			print("Ignoring non-file or nonexistent: %s" % (submission_file))
			return
		if not submission_file.endswith(".tar.gz"):
			print("Ignoring non-.tar.gz: %s" % (submission_file))
			return

		cmd = [ "docker", "create", "--network", "nonat", "--dns", "0.0.0.0", "--dns-search", "localdomain", "labwork", "/labwork/labwork-execute", self._args.server_uri ] + self._args.assignment
		container_id = subprocess.check_output(cmd).decode("ascii").rstrip("\r\n")
		self._container_ids.append(container_id)
		subprocess.check_call([ "docker", "cp", submission_file, "%s:/labwork/labwork.tar.gz" % (container_id) ], stdout = subprocess.DEVNULL)
		subprocess.check_call([ "docker", "start", container_id ], stdout = subprocess.DEVNULL)
		returncode = int(subprocess.check_output([ "docker", "wait", container_id ]).decode())
		logs = subprocess.check_output([ "docker", "logs", container_id ], stderr = subprocess.STDOUT)

		print("Return code: %d" % (returncode))
		print(logs.decode())


	def run_all(self):
		for submission_file in self._args.submission_file:
			self.run(submission_file)

tcr = TestcaseRunner(args)
tcr.run_all()
